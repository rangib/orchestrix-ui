# Dependency vulnerability scanning and security checks
stages:
  - stage: CheckDependencies
    displayName: 'Dependency Security Checks'
    jobs:
      - job: SecurityScan
        displayName: 'NPM Audit & Security Scanning'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: NodeTool@0
            displayName: 'Setup Node.js 20'
            inputs:
              versionSpec: '20'
          
          - script: |
              cd src
              npm ci
            displayName: 'Install dependencies'
          
          # NPM audit for vulnerabilities
          - script: |
              cd src
              echo "Running npm audit..."
              npm audit --audit-level=moderate --json > audit-results.json || true
              
              # Check for high/critical vulnerabilities
              HIGH_VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.high // 0')
              CRITICAL_VULNS=$(cat audit-results.json | jq -r '.metadata.vulnerabilities.critical // 0')
              
              echo "High vulnerabilities: $HIGH_VULNS"
              echo "Critical vulnerabilities: $CRITICAL_VULNS"
              
              if [ "$HIGH_VULNS" -gt 0 ] || [ "$CRITICAL_VULNS" -gt 0 ]; then
                echo "##[error]Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities"
                npm audit --audit-level=moderate
                exit 1
              else
                echo "##[section]No high or critical vulnerabilities found"
                npm audit --audit-level=moderate
              fi
            displayName: 'NPM Security Audit'
          
          # Install gitleaks for secrets scanning
          - script: |
              curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar -xz
              sudo mv gitleaks /usr/local/bin/
            displayName: 'Install gitleaks'
          
          # Scan for secrets in repository
          - script: |
              gitleaks detect --source . --report-format sarif --report-path gitleaks-report.sarif --exit-code 1 --verbose || {
                echo "##[error]Secrets detected in repository"
                exit 1
              }
            displayName: 'Scan for secrets'
            continueOnError: false
          
          # Publish security scan results as SARIF
          - task: PublishBuildArtifacts@1
            displayName: 'Publish security scan results'
            inputs:
              pathToPublish: 'src/audit-results.json'
              artifactName: 'security-scan-results'
            condition: always()
          
          - task: PublishBuildArtifacts@1
            displayName: 'Publish secrets scan results'
            inputs:
              pathToPublish: 'gitleaks-report.sarif'
              artifactName: 'gitleaks-sarif'
            condition: always()