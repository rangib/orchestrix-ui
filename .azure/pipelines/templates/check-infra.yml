# Infrastructure validation and security scanning
stages:
  - stage: CheckInfrastructure
    displayName: 'Infrastructure Security Checks'
    jobs:
      - job: InfraScan
        displayName: 'Bicep Build & Security Scanning'
        pool:
          vmImage: 'ubuntu-latest'
        
        steps:
          - task: AzureCLI@2
            displayName: 'Install Azure CLI and Bicep'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)' # Service connection placeholder
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az bicep install
                az --version
          
          # Build Bicep to ARM template for validation
          - script: |
              echo "Building Bicep templates..."
              cd infra
              az bicep build --file main.bicep --outfile main-generated.json
              
              if [ $? -eq 0 ]; then
                echo "##[section]Bicep compilation successful"
                ls -la main-generated.json
              else
                echo "##[error]Bicep compilation failed"
                exit 1
              fi
            displayName: 'Build Bicep templates'
          
          # Install Checkov for IaC security scanning
          - script: |
              pip install checkov
              checkov --version
            displayName: 'Install Checkov'
          
          # Run Checkov against generated ARM template
          - script: |
              cd infra
              echo "Running Checkov security scan..."
              checkov -f main-generated.json --framework arm --output sarif --output-file-path checkov-results.sarif || {
                echo "##[warning]Checkov found security issues, but continuing..."
              }
              
              # Also run against Bicep files directly
              checkov -f main.bicep --framework bicep --output sarif --output-file-path checkov-bicep.sarif || {
                echo "##[warning]Checkov found issues in Bicep files"
              }
              
              # Count findings
              if [ -f checkov-results.sarif ]; then
                FINDINGS=$(jq '.runs[0].results | length' checkov-results.sarif 2>/dev/null || echo "0")
                echo "Checkov ARM findings: $FINDINGS"
              fi
              
              if [ -f checkov-bicep.sarif ]; then
                BICEP_FINDINGS=$(jq '.runs[0].results | length' checkov-bicep.sarif 2>/dev/null || echo "0")
                echo "Checkov Bicep findings: $BICEP_FINDINGS"
              fi
            displayName: 'Run Checkov security scan'
            continueOnError: true
          
          # Validate ARM template syntax
          - task: AzureCLI@2
            displayName: 'Validate ARM template'
            inputs:
              azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                cd infra
                echo "Validating ARM template syntax..."
                az deployment sub validate \
                  --location eastus \
                  --template-file main-generated.json \
                  --parameters main.parameters.json \
                  --only-show-errors
            continueOnError: true
          
          # Publish scan results
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Checkov results'
            inputs:
              pathToPublish: 'infra/'
              artifactName: 'infra-scan-results'
              publishLocation: 'Container'
            condition: always()
          
          # Upload SARIF results for security dashboard
          - task: PublishBuildArtifacts@1
            displayName: 'Publish SARIF reports'
            inputs:
              pathToPublish: 'infra/checkov-results.sarif'
              artifactName: 'checkov-sarif'
            condition: succeededOrFailed()