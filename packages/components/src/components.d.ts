/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UxButton {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default false
         */
        "loading": boolean;
        /**
          * @default 'md'
         */
        "size": 'sm' | 'md' | 'lg';
        /**
          * @default 'primary'
         */
        "variant": 'primary' | 'secondary' | 'outline' | 'ghost';
    }
    interface UxCard {
        /**
          * @default 'md'
         */
        "padding": 'sm' | 'md' | 'lg';
        /**
          * @default 'default'
         */
        "variant": 'default' | 'elevated' | 'outlined';
    }
    interface UxIcon {
        /**
          * @default 'currentColor'
         */
        "color": string;
        /**
          * @default ''
         */
        "name": string;
        /**
          * @default 'md'
         */
        "size": 'sm' | 'md' | 'lg' | 'xl';
    }
    interface UxInput {
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default ''
         */
        "label": string;
        /**
          * @default ''
         */
        "placeholder": string;
        /**
          * @default false
         */
        "required": boolean;
        /**
          * @default 'text'
         */
        "type": 'text' | 'email' | 'password' | 'number';
        /**
          * @default ''
         */
        "value": string;
    }
}
export interface UxButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUxButtonElement;
}
export interface UxInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUxInputElement;
}
declare global {
    interface HTMLUxButtonElementEventMap {
        "buttonClick": void;
    }
    interface HTMLUxButtonElement extends Components.UxButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUxButtonElementEventMap>(type: K, listener: (this: HTMLUxButtonElement, ev: UxButtonCustomEvent<HTMLUxButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUxButtonElementEventMap>(type: K, listener: (this: HTMLUxButtonElement, ev: UxButtonCustomEvent<HTMLUxButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUxButtonElement: {
        prototype: HTMLUxButtonElement;
        new (): HTMLUxButtonElement;
    };
    interface HTMLUxCardElement extends Components.UxCard, HTMLStencilElement {
    }
    var HTMLUxCardElement: {
        prototype: HTMLUxCardElement;
        new (): HTMLUxCardElement;
    };
    interface HTMLUxIconElement extends Components.UxIcon, HTMLStencilElement {
    }
    var HTMLUxIconElement: {
        prototype: HTMLUxIconElement;
        new (): HTMLUxIconElement;
    };
    interface HTMLUxInputElementEventMap {
        "inputChange": string;
        "inputBlur": void;
        "inputFocus": void;
    }
    interface HTMLUxInputElement extends Components.UxInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUxInputElementEventMap>(type: K, listener: (this: HTMLUxInputElement, ev: UxInputCustomEvent<HTMLUxInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUxInputElementEventMap>(type: K, listener: (this: HTMLUxInputElement, ev: UxInputCustomEvent<HTMLUxInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUxInputElement: {
        prototype: HTMLUxInputElement;
        new (): HTMLUxInputElement;
    };
    interface HTMLElementTagNameMap {
        "ux-button": HTMLUxButtonElement;
        "ux-card": HTMLUxCardElement;
        "ux-icon": HTMLUxIconElement;
        "ux-input": HTMLUxInputElement;
    }
}
declare namespace LocalJSX {
    interface UxButton {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default false
         */
        "loading"?: boolean;
        "onButtonClick"?: (event: UxButtonCustomEvent<void>) => void;
        /**
          * @default 'md'
         */
        "size"?: 'sm' | 'md' | 'lg';
        /**
          * @default 'primary'
         */
        "variant"?: 'primary' | 'secondary' | 'outline' | 'ghost';
    }
    interface UxCard {
        /**
          * @default 'md'
         */
        "padding"?: 'sm' | 'md' | 'lg';
        /**
          * @default 'default'
         */
        "variant"?: 'default' | 'elevated' | 'outlined';
    }
    interface UxIcon {
        /**
          * @default 'currentColor'
         */
        "color"?: string;
        /**
          * @default ''
         */
        "name"?: string;
        /**
          * @default 'md'
         */
        "size"?: 'sm' | 'md' | 'lg' | 'xl';
    }
    interface UxInput {
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default ''
         */
        "label"?: string;
        "onInputBlur"?: (event: UxInputCustomEvent<void>) => void;
        "onInputChange"?: (event: UxInputCustomEvent<string>) => void;
        "onInputFocus"?: (event: UxInputCustomEvent<void>) => void;
        /**
          * @default ''
         */
        "placeholder"?: string;
        /**
          * @default false
         */
        "required"?: boolean;
        /**
          * @default 'text'
         */
        "type"?: 'text' | 'email' | 'password' | 'number';
        /**
          * @default ''
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "ux-button": UxButton;
        "ux-card": UxCard;
        "ux-icon": UxIcon;
        "ux-input": UxInput;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ux-button": LocalJSX.UxButton & JSXBase.HTMLAttributes<HTMLUxButtonElement>;
            "ux-card": LocalJSX.UxCard & JSXBase.HTMLAttributes<HTMLUxCardElement>;
            "ux-icon": LocalJSX.UxIcon & JSXBase.HTMLAttributes<HTMLUxIconElement>;
            "ux-input": LocalJSX.UxInput & JSXBase.HTMLAttributes<HTMLUxInputElement>;
        }
    }
}
