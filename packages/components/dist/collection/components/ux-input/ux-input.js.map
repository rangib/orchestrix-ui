{"version":3,"file":"ux-input.js","sourceRoot":"","sources":["../../src/components/ux-input/ux-input.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAgB,CAAC,EAAE,MAAM,eAAe,CAAC;AAOxE,MAAM,OAAO,OAAO;IALpB;QAMU,gBAAW,GAAW,EAAE,CAAC;QACzB,UAAK,GAAW,EAAE,CAAC;QACnB,SAAI,GAA6C,MAAM,CAAC;QACxD,aAAQ,GAAY,KAAK,CAAC;QAC1B,aAAQ,GAAY,KAAK,CAAC;QAC1B,UAAK,GAAW,EAAE,CAAC;QAMnB,gBAAW,GAAG,CAAC,KAAiB,EAAE,EAAE;YAC1C,MAAM,MAAM,GAAG,KAAK,CAAC,MAA0B,CAAC;YAChD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC;QAEM,eAAU,GAAG,GAAG,EAAE;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC,CAAC;QAEM,gBAAW,GAAG,GAAG,EAAE;YACzB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC;KAyBH;IAvBC,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAC,iBAAiB;YACzB,IAAI,CAAC,KAAK,IAAI,CACb,8DAAO,KAAK,EAAC,aAAa;gBACvB,IAAI,CAAC,KAAK;gBACV,IAAI,CAAC,QAAQ,IAAI,6DAAM,KAAK,EAAC,UAAU,QAAS,CAC3C,CACT;YACD,8DACE,KAAK,EAAC,UAAU,EAChB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,OAAO,EAAE,IAAI,CAAC,WAAW,EACzB,MAAM,EAAE,IAAI,CAAC,UAAU,EACvB,OAAO,EAAE,IAAI,CAAC,WAAW,GACzB,CACE,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, Event, EventEmitter, h } from '@stencil/core';\n\n@Component({\n  tag: 'ux-input',\n  styleUrl: 'ux-input.css',\n  shadow: true,\n})\nexport class UxInput {\n  @Prop() placeholder: string = '';\n  @Prop() value: string = '';\n  @Prop() type: 'text' | 'email' | 'password' | 'number' = 'text';\n  @Prop() disabled: boolean = false;\n  @Prop() required: boolean = false;\n  @Prop() label: string = '';\n\n  @Event() inputChange: EventEmitter<string>;\n  @Event() inputBlur: EventEmitter<void>;\n  @Event() inputFocus: EventEmitter<void>;\n\n  private handleInput = (event: InputEvent) => {\n    const target = event.target as HTMLInputElement;\n    this.inputChange.emit(target.value);\n  };\n\n  private handleBlur = () => {\n    this.inputBlur.emit();\n  };\n\n  private handleFocus = () => {\n    this.inputFocus.emit();\n  };\n\n  render() {\n    return (\n      <div class=\"input-container\">\n        {this.label && (\n          <label class=\"input-label\">\n            {this.label}\n            {this.required && <span class=\"required\">*</span>}\n          </label>\n        )}\n        <input \n          class=\"ux-input\" \n          type={this.type}\n          placeholder={this.placeholder} \n          value={this.value}\n          disabled={this.disabled}\n          required={this.required}\n          onInput={this.handleInput}\n          onBlur={this.handleBlur}\n          onFocus={this.handleFocus}\n        />\n      </div>\n    );\n  }\n}\n"]}